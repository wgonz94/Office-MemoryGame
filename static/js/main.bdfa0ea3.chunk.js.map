{"version":3,"sources":["components/Card/index.js","components/Grid/index.js","components/Jumbotron/index.js","components/Alert/index.js","components/Score/index.js","components/Header/index.js","App.js","index.js"],"names":["Card","id","name","handlePicked","image","className","key","data-name","style","backgroundImage","onClick","Container","fluid","children","Row","Col","size","split","map","join","Jumbotron","props","Alert","message","Score","type","score","Header","App","state","highScore","office","pickedCards","alertMessage","event","target","attributes","value","console","log","shuffleOffice","endGame","newHighScore","setState","shuffleArr","a","j","x","i","length","Math","floor","random","result","newState","includes","push","resultWinner","this","card","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bdfa0ea3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nconst Card = ({ id, name, handlePicked, image}) => (\r\n    <div>\r\n        <div className=\"card\"\r\n             key={id}\r\n             data-name={name}\r\n             name={name}\r\n             style={{ backgroundImage: `url(${image})`}}\r\n             onClick={handlePicked}>\r\n\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Card;","import React from \"react\"\r\n\r\nexport function Container({ fluid, children }) {\r\n    return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>\r\n        {children}</div>;\r\n}\r\n\r\n\r\nexport function Row ({ fluid, children }) {\r\n    return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>\r\n        {children}</div>;\r\n};\r\n\r\nexport function Col({ size, children }) {\r\n    return (\r\n        <div className={size.split(\" \")\r\n                            .map(size => \"col-\" + size)\r\n                            .join(\" \")}>\r\n            {children}\r\n        </div>\r\n\r\n    );\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Jumbotron(props) {\r\n  return (\r\n    <div className=\"jumbotron text-center\">\r\n      <h1>The Office: Memory Game!</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nconst Alert = props => (\r\n<div>\r\n    {props.message ? ( <p>{props.message}\r\n    </p>) : <p className=\"default-msg\"> Let's see if you can pick all 16 Office members!!</p>}\r\n</div>\r\n)\r\n\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Score = props => (\r\n    <div className=\"score\">\r\n        {props.type}: {props.score}\r\n    </div>\r\n)\r\n\r\nexport default Score;","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Header = props => (\r\n    <div className=\"header\">\r\n        <div className=\"title\">\r\n            {props.children}\r\n        </div>\r\n        \r\n    </div>\r\n);\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport Card from \"./components/Card\";\r\nimport { Container, Row, Col } from \"./components/Grid\";\r\nimport Jumbotron from \"./components/Jumbotron\";\r\nimport Alert from \"./components/Alert\";\r\nimport Score from \"./components/Score\";\r\nimport office from \"./cards.json\";\r\nimport Header from \"./components/Header\";\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    // this handles state of cards along with scores and game logic\r\n    state = {\r\n        highScore: 0,\r\n        office: office,\r\n        pickedCards: [],\r\n        alertMessage: \"\"\r\n    };\r\n\r\n    handlePicked = (event) => {\r\n        const name = event.target.attributes.name.value;\r\n        console.log(event.target.attributes.name.value)\r\n        this.shuffleOffice()\r\n        this.endGame(name, this.newHighScore)\r\n    } \r\n    \r\n     shuffleOffice = () => {\r\n        this.setState({ [office] : this.shuffleArr(this.state.office)})\r\n    }\r\n\r\n    shuffleArr = (a) => {\r\n        var j, x, i;\r\n        for (i = a.length - 1; i > 0; i--) {\r\n          j = Math.floor(Math.random() * (i + 1));\r\n          x = a[i];\r\n          a[i] = a[j];\r\n          a[j] = x;\r\n        }\r\n        return a;\r\n      }\r\n      //if a user picks the same card/office char... the game will display a message and reset the game \r\n      //Otherwise, character picked will update to arr to track score\r\n      //display winner message if they picked all cards\r\n    endGame = (name, result) => {\r\n      const newState = {...this.state};\r\n      if(newState.pickedCards.includes(name)) {\r\n          newState.alertMessage = `Oh No! you picked \"${name}\" already!`\r\n          this.setState({ alertMessage: newState.alertMessage})\r\n          console.log(newState.alertMessage)\r\n          newState.pickedCards.length = 0\r\n          this.setState({ [this.state] : newState})\r\n      } else {\r\n          newState.pickedCards.push(name)\r\n          console.log(newState.pickedCards)\r\n          newState.alertMessage = `Great Job!`\r\n          this.setState({ alertMessage: newState.alertMessage})\r\n          this.setState({ [this.state] : newState})\r\n      }\r\n      result(newState, this.resultWinner)\r\n    }\r\n   \r\n    newHighScore = (newState, result) => {\r\n        if(newState.pickedCards.length > newState.highScore) {\r\n            newState.highScore++\r\n            console.log(newState.highScore)  \r\n            this.setState(this.state = newState)\r\n        }\r\n        result(newState)\r\n    }\r\n\r\n    resultWinner = (newState) => {\r\n        if(newState.pickedCards.length === 16) {\r\n            newState.alertMessage = \"Office Winner!\"\r\n            newState.pickedCards = []\r\n            this.setState({ [this.state] : newState})\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"background\">\r\n                \r\n                <Container>\r\n                    <Row>\r\n                    <Col size=\"md-12\">\r\n                        <Header>\r\n                        <Jumbotron />\r\n                        <div className=\"d-flex justify-content-end\">\r\n                            <Col size=\"md-2\">\r\n                            <Score type=\"Score\" score={this.state.pickedCards.length}/>\r\n                            </Col>\r\n                            \r\n                            <Col size=\"md-3\">\r\n                             <Score type=\"High Score\" score={this.state.highScore}/>   \r\n                            </Col>\r\n                            \r\n                        </div>\r\n\r\n                        <div className=\"d-flex justify-content-center\">\r\n\r\n                        <Alert message={this.state.alertMessage} />\r\n                        </div>\r\n                    </Header>\r\n                    </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col size=\"md-12\">\r\n                            {this.state.office.map(card => (\r\n                                <Card handlePicked={this.handlePicked}\r\n                                      name={card.name}\r\n                                      id={card.id}\r\n                                      key={card.id}\r\n                                      image={card.image}\r\n\r\n                                />\r\n                            ))}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}